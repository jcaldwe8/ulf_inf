;epilog axioms for class ACCOMPANY: generated by python on 8/20/2012
(s '(all x (all y (y animate-agent.n) (all e ((x accompany.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x conduct.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x escort.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x guide.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x lead.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x shepherd.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
(s '(all x (all y (y animate-agent.n) (all e ((x steer.v y) ** e) (some z (z location.n) (x ((adv-a (with.p y)) go-to.v z)))))))
;epilog axioms for class ASSESSMENT generated by python on 8/20/2012
(s '(all x (x animate.n) (all y (all e ((x analyze.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x appraise.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x assess.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x audit.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x evaluate.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x review.2.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x scrutinize.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x scrutinize.2.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x analyse.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x analyse.2.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x analyse.3.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x analyse.4.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x assay.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x proofread.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
(s '(all x (x animate.n) (all y (all e ((x study.1.v y) ** e) ((x ((adv-a detailed.a) (look.v y))) and ((x have-opinion-of.v y) @ (end-of.f e)))))))
;epilog axioms for class BEGIN: generated by python on 8/20/2012
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x go-on-to.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x proceed-to.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x begin-to.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x start-to.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x start-off.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
(s '(all x ((x animate-agent.n) or (x organization.n)) (all_pred y (y action-type.n) (all e ((x commence-to.v (Ka y)) ** e) ((x start.v (Ka y)) * e)))))
;epilog axioms for class BREAK: generated by python on 8/20/2012
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x break.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x break-apart.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x break-down.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x break-up.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x chip.v y) ** e) ((x damage.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x cleave.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x crack.v y) ** e) ((x damage.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x crash.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x crush.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x dissolve.v y) ** e) ((x dissipate.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x fracture.v y) ** e) ((x damage.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x fragment.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x rend.v y) ** e) ((x damage.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x rive.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x rip.v y) ** e) ((x damage.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x shatter.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x shred.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x sliver.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x smash.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x snap.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x splinter.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x split.v y) ** e) ((x break.v y) * e)))))
(s '(all x ((x agent.n) or (x solid-object.n)) (all y (y solid-object.n) (all e ((x tear.v y) ** e) ((x damage.v y) * e)))))
;epilog axioms for class BREATHE generated by python on 8/22/2012
(s '(all x (all e ((x barf.v) ** e) (some s (s vomit.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x dribble.v) ** e) (some s (s saliva.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x drool.v) ** e) (some s (s saliva.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x pee.v) ** e) (some s (s urine.n) ((x ((adv-a (via-portal.p (urethra-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x piss.v) ** e) (some s (s urine.n) ((x ((adv-a (via-portal.p (urethra-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x puke.v) ** e) (some s (s vomit.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x shit.v) ** e) (some s (s excrement.n) ((x ((adv-a (via-portal.p (rectum-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x spit.v) ** e) (some s (s entity.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x sweat.v) ** e) (some s (s sweat.n) ((x ((adv-a (via-portal.p (skin-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x throw_up.v) ** e) (some s (s vomit.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x vomit.v) ** e) (some s (s vomit.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x weep.v) ** e) (some s (s tears.n) ((x ((adv-a (via-portal.p (eyes-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x cough-up.v) ** e) (some s (s entity.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x cry.v) ** e) (some s (s tears.n) ((x ((adv-a (via-portal.p (eyes-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x defecate.v) ** e) (some s (s excrement.n) ((x ((adv-a (via-portal.p (rectum-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x expectorate.v) ** e) (some s (s entity.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x retch.v) ** e) (some s (s vomit.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x slobber.v) ** e) (some s (s saliva.n) ((x ((adv-a (via-portal.p (mouth-of.f x))) (expel-from-self.v s))) * e)))))
(s '(all x (all e ((x urinate.v) ** e) (some s (s urine.n) ((x ((adv-a (via-portal.p (urethra-of.f x))) (expel-from-self.v s))) * e)))))
;epilog axioms for class C1: generated by python on 8/20/2012
(s '(all x (all y (all e ((x haul.v y) ** e) ((x convey.v y) ** e)))))
(s '(all x (all y (all e ((x lug.v y) ** e) ((x convey.v y) ** e)))))
(s '(all x (all y (all e ((x run.v y) ** e) ((x convey.v y) ** e)))))
(s '(all x (all y (all e ((x schlep.v y) ** e) ((x convey.v y) ** e)))))
(s '(all x (all y (all e ((x tote.v y) ** e) ((x convey.v y) ** e)))))
(s '(all x (all y (all e ((x carry.v y) ** e) ((x convey.v y) ** e)))))
;epilog axioms for class C2: generated by python on 8/20/2012
(s '(all x (all y (all e ((x hoist.v y) ** e) (((x convey.v y) ** e) and ((pair x e) (in-manner upward.a)))))))
(s '(all x (all y (all e ((x heft.v y) ** e) (((x convey.v y) ** e) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x drag.v y) ** e) (((x pull.v y) ** e) and ((pair x e) (in-manner steady.a)))))))
(s '(all x (all y (all e ((x tow.v y) ** e) (((x pull.v y) ** e) and ((pair x e) (in-manner steady.a)))))))
(s '(all x (all y (all e ((x tug.v y) ** e) (((x pull.v y) ** e) and ((pair x e) (in-manner firm.a)))))))
(s '(all x (all y (all e ((x pull.v y) ** e) (((x pull.v y) ** e) and ((pair x e) (in-manner firm.a)))))))
(s '(all x (all y (all e ((x draw.v y) ** e) (((x pull.v y) ** e) and ((pair x e) (in-manner steady.a)))))))
(s '(all x (all y (all e ((x push.v y) ** e) (((x push.v y) ** e) and ((pair x e) (in-manner firm.a)))))))
;epilog axioms for class C3: generated by python on 8/20/2012
(s '(all x (all y (all e ((x yank.v y) ** e) ((((x pull.v y) ** e) and ((pair x e) (in-manner forceful.a))) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x nudge.v y) ** e) ((((x push.v y) ** e) and ((pair x e) (in-manner gentle.a))) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x heave.v y) ** e) ((((x push.v y) ** e) and ((pair x e) (in-manner forceful.a))) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x kick.v y) ** e) ((((x push.v y) ** e) and ((pair x e) (in-manner forceful.a))) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x shove.v y) ** e) ((((x push.v y) ** e) and ((pair x e) (in-manner forceful.a))) and ((pair x e) (in-manner brief.a)))))))
(s '(all x (all y (all e ((x thrust.v y) ** e) ((((x push.v y) ** e) and ((pair x e) (in-manner firm.a))) and ((pair x e) (in-manner brief.a)))))))
;epilog axioms for class CREATE generated by python on 8/20/2012
(s '(all x (all y (y linguistic-expression.n) (all e ((x coin.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y coin.n) (all e ((x coin.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y symbolic-obj.n) (all e ((x compose.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y piece-of-info.n) (all e ((x compute.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y mixture.n) (all e ((x concoct.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y plan.n) (all e ((x concoct.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y physical-or-mental-artifact.n) (all e ((x construct.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y physical-or-mental-artifact.n) (all e ((x contrive.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity-or-episode.n) (all e ((x create.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y piece-of-info.n) (all e ((x derive.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y film.n) (all e ((x develop.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y abstract.a) (all e ((x develop.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y hole.n) (all e ((x dig.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y artificial.a) (all e ((x fabricate.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x form.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y abstract.a) (all e ((x formulate.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y physical-or-mental-artifact.n) (all e ((x improvise.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y concept.n) (all e ((x invent.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y egg.n) (all e ((x lay.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y symbolic-obj.n) (all e ((x lay.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y plan.n) (all e ((x lay.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity-or-episode.n) (all e ((x make.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y artifact.n) (all e ((x manufacture.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity-or-episode.n) (all e ((x model.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y system.n) (all e ((x organize.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity-or-episode.n) (all e ((x produce.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y physical-object.n) (all e ((x build.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y artificial.a) (all e ((x synthesize.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y entity-or-episode.n) (all e ((x conjure.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y hole.n) (all e ((x dig.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y money.n) (all e ((x mint.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y object-made-of-parts.n) (all e ((x reconstitute.v y) ** e) ((x make.v y) ** e)))))
(s '(all x (all y (y production.n) (all e ((x stage.v y) ** e) ((x make.v y) ** e)))))
;epilog axioms for class escape generated by python on 8/22/2012
(s '(all x (x animate.a) (all y (all e ((x ascend.v y) ** e) (((not (x (at-loc.p (top-of.f y)))) @ (begin-of.f e)) and ((x (at-loc.p (top-of.f y))) @ (end-of.f e)))))))
(s '(all x (x animate.a) (all y (all e ((x climb.v y) ** e) (((not (x (at-loc.p (top-of.f y)))) @ (begin-of.f e)) and ((x (at-loc.p (top-of.f y))) @ (end-of.f e)))))))
(s '(all x (x animate.a) (all y (all e ((x descend.v y) ** e) (((not (x (at-loc.p (bottom-of.f y)))) @ (begin-of.f e)) and ((x (at-loc.p (bottom-of.f y))) @ (end-of.f e)))))))
(s '(all x (x animate.a) (all y (all e ((x enter.v y) ** e) (((not (x in.p y)) @ (begin-of.f e)) and ((x in.p y) @ (end-of.f e)))))))
(s '(all x (x animate.a) (all y (all e ((x cross.v y) ** e) (((not (x across.p y)) @ (begin-of.f e)) and ((x across.p y) @ (end-of.f e)))))))
(s '(all x (x animate.a) (all y (all e ((x approach.v y) ** e) (((not (x near.p y)) @ (begin-of.f e)) and ((x near.p y) @ (end-of.f e)))))))
;epilog axioms for class escape2 generated by python on 8/22/2012
;epilog axioms for class forbid generated by python on 8/22/2012
(s '(all x (x animate.a) (all y (all_pred P (all e ((x ban-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x bar-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x deter-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x discourage-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x dissuade-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x forbid-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x prohibit-from.v y (Ka P)) ** e) ((x tell-to.v y (that (not (y P)))) ** e))))))
;epilog axioms for class forbid2 generated by python on 8/22/2012
(s '(all x (x animate.a) (all y (all_pred P (all e ((x restrain-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x stop-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x block-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x hamper-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x hinder-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x impede-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x inhibit-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x obstruct-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x preclude-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
(s '(all x (x animate.a) (all y (all_pred P (all e ((x prevent-from.v y (Ka P)) ** e) ((not (y P)) * e))))))
;epilog axioms for class GET generated by python on 8/20/2012
(s '(all x (all y (y entity.n) (all e ((x attain.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x buy.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y vehicle.n) (all e ((x call.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y mobile-entity.n) (all e ((x catch.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y transportation-entity.n) (all e ((x charter.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x choose.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x find.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y collection-of-entities.n) (all e ((x gather.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y employee.n) (all e ((x hire.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x lease.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x order.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x pick.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x pluck.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x procure.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x pull.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x rent.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x reserve.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y picture.n) (all e ((x shoot.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y film.n) (all e ((x shoot.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x win.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x earn.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x fetch.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x gain.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x get.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x save.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x score.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x secure.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x steal.v y) ** e) ((x get.v y) ** e)))))
;epilog axioms for class LE1: generated by python on 8/22/2012
(s '(all x (all e ((x incandesce.v) ** e) ((x ((adv-a steady.a) (make.v (K ((attr gentle.a) light.n))))) ** e))))
(s '(all x (all e ((x shimmer.v) ** e) ((x ((adv-a intermittent.a) (make.v (K ((attr gentle.a) light.n))))) ** e))))
(s '(all x (all e ((x flare.v) ** e) ((x ((adv-a punctual.a) (make.v (K ((attr strong.a) light.n))))) ** e))))
(s '(all x (all e ((x flash.v) ** e) ((x ((adv-a punctual.a) (make.v (K ((attr strong.a) light.n))))) ** e))))
;epilog axioms for class LE2: generated by python on 8/22/2012
(s '(all x (all e ((x beam.v) ** e) ((x ((adv-a steady.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x blink.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x flame.v) ** e) ((x ((adv-a unsteady.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x flicker.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x glimmer.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x glint.v) ** e) ((x ((adv-a punctual.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x glisten.v) ** e) ((x ((adv-a unsteady.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x glitter.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x glow.v) ** e) ((x ((adv-a steady.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x shine.v) ** e) ((x ((adv-a steady.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x sparkle.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
(s '(all x (all e ((x twinkle.v) ** e) ((x ((adv-a intermittent.a) (make.v (K light.n)))) ** e))))
;epilog axioms for class LE3: generated by python on 8/22/2012
(s '(all x (all e ((x blaze.v) ** e) ((x (make.v (K ((attr strong.a) light.n)))) ** e))))
(s '(all x (all e ((x fluoresce.v) ** e) ((x (make.v (K ((attr gentle.a) light.n)))) ** e))))
(s '(all x (all e ((x glare.v) ** e) ((x (make.v (K ((attr harsh.a) light.n)))) ** e))))
(s '(all x (all e ((x scintillate.v) ** e) ((x (make.v (K ((attr gentle.a) light.n)))) ** e))))
;epilog axioms for class LE4: generated by python on 8/22/2012
(s '(all x (all e ((x gleam.v) ** e) ((x make.v (K light.n)) ** e))))
(s '(all x (all e ((x burn.v) ** e) ((x make.v (K light.n)) ** e))))
;epilog axioms for class OBTAIN generated by python on 8/20/2012
(s '(all x (all y (y entity.n) (all e ((x accept.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y collection-of-entites.n) (all e ((x accrue.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y collection-of-entites.n) (all e ((x accumulate.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x appropriate.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y physical-entity.n) (all e ((x borrow.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x cadge.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x collect.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x exact.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x grab.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x inherit.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x receive.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x recover.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x regain.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x retrieve.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x seize.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x select.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x snatch.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x acquire.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x obtain.v y) ** e) ((x get.v y) ** e)))))
(s '(all x (all y (y entity.n) (all e ((x purchase.v y) ** e) ((x get.v y) ** e)))))
;epilog axioms for class PEER0 generated by python on 8/20/2012
(s '(all x (x animate.n) (all y (all e ((x attend.v y) ** e) (x see.v y)))))
(s '(all x (x animate.n) (all y (all e ((x look.1.v y) ** e) (x see.v y)))))
;epilog axioms for class PEER1 generated by python on 8/20/2012
(s '(all x (all y (all a (a action-type.n) (all e ((x ask-of.v y a) ** e) ((x want-tbt.v (that (some e1 (e1 after e) ((y do.v a) ** e1)))) @ e))))))
(s '(all x (x phys-obj.n) (all y (y phys-ent.n) (all e ((x at-loc.p y) ** e) (((loc-of.f x) within-or-adjacent-to.p (loc-of.f y)) ** e)))))
(s '(all e (e event.n) (all y ((y phys-ent.n) and (e at-loc.p y)) (((loc-of.f e) within-or-adjacent-to.p (loc-of.f y)) @ e))))
(s '(all e (e event.n) (all y ((y clock-time.n) and (e at-loc.p y)) ((time-of.f x) approx-equal-to.p (time-of.f y)))))
(s '(all x (x action-type.n) (all y (all e ((x at-dir.p y) ** e) ((x towards.p (loc-of y)) @ e)))))
(s '(all x (all y (all e ((x attack.v y) ** e) ((x try.v (to (harm.v y))) * e)))))

(s '(all x (all p (p propos) (all e ((x believe-tbt.v p) ** e) ((x believe-tbt.v (that ((x know-tbt.v p) @ e))) ** e)))))
(s '(all x (all e ((x breathe.v) ** e) (((x ((adv-a (via.p (mouth-of.f x))) (ingest.v (K air.n)))) * e) or ((x ((adv-a (via.p (nose-of.f x))) (ingest.v (K air.n)))) * e)))))
(s '(all x (all y (all e ((x break.v y) ** e) (some e1 (((y become.v broken.a) ** e1) and (e1 @ e)) ((x cause.v e1) ** e))))))
(s '(all x (all e ((x burn.v) ** e)  ((((K flames.n) on.p x) * e) and (((x ((adv-a partial.a) destroyed.a)) @ (end-of.f e)) or ((x ((adv-a complete.a) destroyed.a)) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x catch-obj.v y) ** e) ((((not (x phys-control-obj.v y)) @ (begin-of.f e)) and ((x phys-control-obj.v y) @ (end-of.f e))) and ((y move-intrans.v) @ (begin-of.f e)))))))
(s '(all x (all y (all a (a action-type.n) (all e1 (x cause-of.n e1) (some e (e event.n) ((x cause.v y a) ** e)))))))
(s '(all x (x event.n) (all e1 (all e ((x cause.v e1) ** e) (x = e)))))
(s '(all e1 (all e2 (e1 cause-of.n e2) ((begin-of.f e1) at-or-before (begin-of.f e2)))))
(s '(all e1 (all e2 (e1 cause-of.n e2) (all e3 (e2 cause-of.n e3) (probably (e1 cause-of.n e3))))))
(s '(all x (x animate.a) (all e (all e1 ((x cause.v e1) ** e) (x cause-of.n e1)))))
(s '(all x (x inanimate-obj.n) (all e (all e1 ((x cause.v e1) ** e) (x causal-instrument-of.n e1)))))
(s '(all_pred P ('P action-pred) (all x (all e ((x P) ** e) (all e1 (e1 subep-of.n e) ((x cause.v e1) * e))))))
(s '(all x (x animate.a) (all e (x cause.v e) (some e1 (((pair x e1) action.n) and (e1 cause-of.n e))))))
(s '(all x (x inanimate-object.n) (all e (x cause.v e) (some e1 (((pair x e1) attribute.n) and (e1 cause-of.n e))))))
(s '(all x (x episode.n) (all e (x cause.v e) (x cause-of.n e))))
(s '(all x (x action.n) (all e (x cause.v e) ((rst x) cause-of.n e))))
(s '(all x (all y (all e ((x claim-tbt.v y) ** e) (some z ((x convey-info-to.v (that (y true.a)) z) * e))))))
(s '(all x (all e ((x climb.v) ** e) ((x ((adv-a up.p) move-intrans.v)) * e))))
(s '(all x (all y (y phys-obj.n) (all e ((x close.v y) ** e) (((y open.a) @ (begin-of.f e)) and ((y closed.a) @ (end-of.f e)))))))
(s '(all x (all y (y event-type) (all e ((x close.v y) ** e) (((y ongoing.a) @ (begin-of.f e)) and ((not (y ongoing.a)) @ (end-of.f e)))))))
(s '(all x (all y (y phys-obj.n) (all e ((x close.v y) ** e) (some e1 (((y become.v closed.a) ** e1) and (e1 @ e)) ((x cause.v e1) ** e))))))
(s '(all x (all y (y event-type) (all e ((x close.v y) ** e) (some e1 (((y become.v (not ongoing.a)) ** e1) and (e1 @ e)) ((x cause.v e1) ** e))))))
(s '(all x (all y (all e ((x communicate-with.v y) ** e) (some z (z info.n) (((x ((adv-a (via.p action.n)) (convey-info-to.v y z))) * e) or ((x ((adv-a (via.p object.n)) (convey-info-to.v y z))) * e)))))))
(s '(all x (all y (all e ((x contain.v y) ** e) ((y inside.p e) ** e)))))
(s '(all x (all y (y solid.a) (all e ((x consume.v y) ** e) ((x ((adv-a (via.p (mouth-of.n x))) (ingest.v y))) * e)))))
(s '(all x (all y (all e ((x continue-to.v y) ** e) (((x y) @ (begin-of.f e)) and ((x y) @ (end-of.f e)))))))
(s '(all x (all y (all z (all e ((x convey-info-to.v y z) ** e) (((x know-tbt.v z) @ e) and ((y know-tbt.v z) @ (end-of.f e))))))))
(s '(all x (all y (all e ((x convey.v y) ** e) ((x phys-control-obj.v y) @ e)))))
(s '(all x (all y (all e ((x decide-tbt.v y) ** e) (((not (x believe-tbt.v y)) @ (begin-of.f e)) and ((x believe-tbt.v y) @ (end-of.f e)))))))
(s '(all x (all y (all z (all e ((x designate.v y z) ** e) ((x decide-tbt.v (that (z name-of.n y))) * e))))))
(s '(all x (all y (all e ((x destroy.v y) ** e) ((((y exist.v) @ (begin-of.f e)) and (some a (a action-type.n) ((x do.v a) ** e))) and (e cause.v (not (y exist.v))))))))
(s '(all x (all_pred1 P (all e ((x do.v (Ka P)) ** e) ((x P) ** e)))))
(s '(all x (all y (y liquid.a) (all e ((x drink.v y) ** e) ((x ((adv-a steady.a) ((adv-a (via.p (mouth-of.n x))) (ingest.v y)))) * e)))))
(s '(all x (all y (all e ((x drop.v y) ** e) ((((x hold.v y) @ (begin-of.f e)) and ((not (x hold.v y)) @ (end-of.f e))) and ((y fall.v) @ e))))))
(s '(all x (all y (y solid.a) ((x ((adv-a (via.p (mouth-of.n x))) (ingest.v y))) * e))))
(s '(all x (all y (all e ((x enjoy.v y) ** e) ((x like-to-degree.v ? y) ** e)))))
(s '(all x (all e ((x fall.v) ** e) (((x ((adv-a (through.p gas.n)) ((adv-a down.a) move-intrans.v))) * e) or ((x ((adv-a (through.p gas.n)) ((adv-a down.a) move-intrans.v))) * e)))))
(s '(all x (all y (all e ((x fight.v y) ** e) (some a ((a action-type.n) and (a against.a y)) ((x do.v a) * e))))))
(s '(all x (all y (all e ((x find-obj.v y) ** e) ((((not (x know.v (loc-of.n y))) @ (begin-of.f e)) and ((y exist.v) @ e)) and ((x know.v (loc-of.n y)) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x find-out.v y) ** e) (((not (x know-tbt.v y)) @ (begin-of.f e)) and ((x know-tbt.v y) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x finish.v y) ** e) (some e1 (((y become.v complete.a) ** e1) and (e1 @ e)) ((x cause.v e1) * e))))))
(s '(all x (all e ((x fly.v) ** e) (((x ((adv-a (through.p gas.n)) ((adv-a unsupported.a) move-intrans.v))) * e) or ((x ((adv-a (through.p vacuum.n)) ((adv-a unsupported.a) move-intrans.v))) * e)))))
(s '(all x (all y (all e ((x forget.v y) ** e) (((x know-tbt.v y) @ (begin-of.f e)) and ((not (x know-tbt.v y)) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x get-attention-of.v y) ** e) (((not (y pay-attention-to.v y)) @ (begin-of.f e)) and ((y pay-attention-to.v y) @ (end-of.f e)))))))
(s '(all x (all y (y phys-obj.n) (all e ((x get-obj.v y) ** e) (((not (x have-obj.v y)) @ (begin-of.f e)) and ((x have-obj.v y) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x grasp.v y) ** e) ((x hold.v y) * e)))))
(s '(all x (all y (all e ((x go-to.v y) ** e) (((not (x at-loc.p y)) @ (begin-of.f e)) and ((x at-loc.p y) @ (end-of.f e)))))))
(s '(all x (all e ((x hang.v) ** e) (some y ((x (adv-a (near.p (top-of.n x))) attached-to.a y) @ e)))))
(s '(all x (all y (all e ((x hear-sound.v y) ** e) ((x ((adv-a (via.p (ears-of.n x))) (perceive.v y))) * e)))))
(s '(all x (all y (all z (all e ((x hide-from y z) ** e) (some a (a action-type.n) (((x do.v a) * e) and (e cause.v (not (z perceive.v y))))))))))
(s '(all x (all y (all z (all e ((x hit-with.v y z) ** e) (((x ((adv-a forceful.a) (move-trans.v z))) and (z touch.v y)) * e))))))
(s '(all x (all y (all e ((x hold.v y) ** e) ((((some z (z grasping-part.n) (x have-part.v z)) and (x touch.v y)) and (y close-to.p x)) * e)))))
(s '(all e1(e1 event.n) (all e2 (((e2 event.n) and (e2 during.p e1)) and (e1 imply.v e2)) (e1 involve-event.v e2))))
(s '(all x (all e ((x jump.v) ** e) (((x on.p surface.n) @ (begin-of.f e)) and ((x ((adv-a (with.p (legs-of.n x))) ((adv-a upwards.a) move-intrans.v))) * e)))))
(s '(all x (all y (all e ((x know.v y) ** e) (((x familiar-with.a y) * e) and (all p (p ((adv-a major.a) part-of.p) y) ((x familiar-with.a p) * e)))))))
(s '(all x (all y (all e ((x know-tbt.v y) ** e) (((x believe-tbt.v y) and (y true.a)) ** e)))))
(s '(all x (all e ((x laugh.v) ** e) ((x make.v (K laugh.n)) * e))))
(s '(all x (all y (all e ((x learn-propos.v y) ** e) (((not (x know-tbt.v y)) @ (begin-of.f e)) and ((x know-tbt.v y) @ (end-of.f e)))))))
(s '(all x (all e ((x lie.v) ** e) (((x recumbent.a) and (x on.a surface.n)) * e))))
(s '(all x (all y (all e ((x lift.v y) ** e) ((x ((adv-a upwards.a) (move-trans.v y))) * e)))))
(s '(all x (all y (all e ((x listen-to.v y) ** e) (some z (sound.n z) ((((y make.v z) and (x hear-sound.v z)) and (x pay-attention-to.v z)) * e))))))
(s '(all x (all e ((x live.v) ** e) ((x alive.a) ** e))))
(s '(all x (all y (all e ((x look-toward.v y) ** e) (((x move-trans.v (eyes-of.n x)) * e) and (((gaze-of.n x) pointed-at.p y) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x make.v y) ** e) (((not (y exist.v)) @ (begin-of.f e)) and ((y exist.v) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x mean.v y) ** e) ((y meaning-of.a x) ** e)))))
(s '(all x (all y (all e ((x move-trans.v y) ** e) (some e1 ((y change-loc.v) ** e1) ((x cause.v e1) ** e))))))
(s '(all x (all e ((x move-intrans.v) ** e) ( some p (p part-of.a x) ((x move-trans.v p) * e)))))
(s '(all x  (all e ((x change-loc.v) ** e) (some a (a location.n) (some b ((b location.n) and (not (b = a))) (some e1 (((x at.a a) @ (begin-of.f e1)) and ((x at.a b) @ (end-of.f e1))) ((x cause.v e1) ** e)))))))
(s '(all x (all y (all e ((x pay-attention-to.v y) ** e) ((x conscious-of.a y) * e)))))
(s '(all x (all y (all e ((x pull.v y) ** e) ((x ((adv-a (towards.a x)) (move-trans.v y))) * e)))))
(s '(all x (all y (all e ((x push.v y) ** e) ((x ((adv-a (away-from.a x)) (move-trans.v y))) * e)))))
(s '(all x (all y (all z (all e ((x put.v y z) ** e) (((x move-trans.v y) * e) and ((y at.a z) @ (end-of.f e))))))))
(s '(all x (all y (all e ((x recognize-tbt.v y) ** e) ((x know-tbt.v y) @ (end-of.f e))))))
(s '(all x (all y (all e ((x forget.v y) ** e) (((some f (f before e) ((x know-tbt.v y) ** f)) and ((not (x know-tbt.v y)) @ (begin-of.f e))) and ((x know-tbt.v y) @ (end-of.f e)))))))
(s '(all x (all a (a action-type.n) (all e ((x repeat.v a) ** e) ((some f (f before e) ((x do.v a) ** f)) and ((x do.v a) ** e))))))
(s '(all x (all y (not (y action-type.n)) (all e ((x repeat.v y) ** e) ((some f (f before e) ((x say.v y) ** f)) and ((x say.v y) ** e))))))
(s '(all x (all y (all e ((x ride.v y) ** e) ((((x on.p y) and (y move-trans.v x)) and (y move-intrans.v)) * e)))))
(s '(all x (all y (all e ((x run-to.v y) ** e) ((x ((adv-a (with.p (legs-of.n x))) ((adv-a quick.a) go-to.v y))) * e)))))
(s '(all x (all e ((x scream.v) ** e) (some y (y noise) (((x make.v y) and (y loud.a)) * e)))))
(s '(all x (all y (all e ((x see.v y) ** e) ((x ((adv-a (via.p (eyes-of.n x))) (perceive.v y))) * e)))))
(s '(all x (all y (all e ((x shake.v y) ** e) ((x ((adv-a violent.a) move-trans.v y)) * e)))))
(s '(all x (all e ((x sit.v) ** e) (((x sitting.a) and (x on.a surface.n)) * e))))
(s '(all x (all e ((x sleep.v) ** e) ((x asleep.a) ** e))))
(s '(all x (all e ((x smile.v) ** e) ((x ((adv-a (via.p (mouth-of.n x))) (make.v smile.n))) * e))))
(s '(all x (all e ((x speak.v) ** e) (some y (y (K ((attr audible.a) language.n))) ((x make.v y) * e)))))
(s '(all x (all e ((x stand.v) ** e) (((x standing.a) and (x on.a surface.n)) * e))))
(s '(all x (all a (a action-type.n) (all e ((x start.v a) ** e) (((not (x do.v a)) @ (begin-of.f e)) and ((x do.v a) @ (end-of.f e)))))))
(s '(all x (all a (a action-type.n) (all e ((x stop.v a) ** e) (((x do.v a) @ (begin-of.f e)) and ((not (x do.v a)) @ (end-of.f e)))))))
(s '(all x (all y (all e ((x take-obj.v y) ** e) ((x get-obj.v y) * e)))))
(s '(all x (all y (all e ((x ingest.v y) ** e) ((not ((y inside.p x) @ (begin-of.f e))) and ((y inside.p x) @ (end-of.f e)))))))
(s '(all x (all y (all z (all e ((x tell-to.v y z) ** e) (((x communicate-with.v y) and (y ((adv-a (from.p x)) hear-propos.v z))) * e))))))
(s '(all x (all y (all e ((x touch.v y) ** e) (some z (z part-of.a x) ((z in-contact-with.a y) @ e))))))
(s '(all x (all y (all e ((x throw.v y) ** e) ((x ((adv-a (away-from.p x)) ((adv-a ((through.p gas.n) or (through.p vacuum.n))) (move-trans.v y)))) * e)))))
(s '(all x (all y (all e ((x understand-meaning-of y) ** e) (some z ((x know.v (that (y mean.v z))) ** e))))))
(s '(all x (all y (all e ((x walk-to.v y) ** e) ((x ((adv-a (not quick.a)) ((adv-a (via.p (legs-of.n x))) (go-to.v y)))) * e)))))
(s '(all x (all e ((x wait.v) ** e) (some y (not (x control.v y)) ((x expect.v y) * e)))))
(s '(all x (all y (all e ((x want-obj.v y) ** e) ((x want-tbt.v (that (x have-obj.v y))) ** e)))))
(s '(all x (all y (all e ((x want-tbt.v y) ** e) ((x believe-tbt.v (that (y gratifying.a))) * e)))))
(s '(all x (all y (all e ((x watch.v y) ** e) (((x see.v y) and (x pay-attention-to.v y)) * e)))))
(s '(all x (all e ((x weep.v) ** e) ((x (adv-a (via.p (eyes-of.n x))) (make.v tears.n)) * e))))
(s '(all x (all e ((x change.v) ** e) (some p (p property-of.n x) (some v1((v1 value-of.n p) @ (begin-of.f e)) (some v2((v1 value-of.n p) @ (end-of.f e)) (v1 != v2)))))))
(s '(all x (all y (y action-set.n) (all z (z in.p y) (all e ((x choose-from.v z y) ** e) (some r (r role.n) ((x decide-tbt.v (that (z = r))) ** e)))))))
(s '(all x (all a (a action-type.n) (all e ((x fail.v a) ** e) (((x try.v a) and (not (x do.v a))) * e)))))
;;(s '(John fail stand) -> (John try stand) and (not (John stand)))
(s '(all x (all y (y contain.v ((attr written.a) language.n)) (all e ((x read.v y) ** e) ((x gain-info-from.v y) * e)))))
(s '(all x (all y (all z (all e ((x give-to.v y z) ** e) (((x have.v z) @ (begin-of.f e)) and ((not (y have.v z)) @ (begin-of.f e)) and ((not (x have.v z)) @ (end-of.f e)) and ((y have.v z) @ (end-of.f e))))))))
(s '(all x (all y (all e ((x hear-propos y) ** e) (((x hear-propos.v y) and (x pay-attention-to.v y)) * e)))))
(s '(all x (all y (all e ((x damage.v y) ** e) (some e1 (((y become.v damaged.a) ** e1) and (e1 @ e)) ((x cause.v e1) ** e))))))
(s '(all x (all y (all e ((x dissipate.v y) ** e) (some e1 (((y become.v dissipated.a) ** e1) and (e1 @ e)) ((x cause.v e1) ** e))))))
;epilog axioms for class send generated by python on 8/20/2012
(s '(all x (all y (all z (z location.n) (all e ((x convey-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x deliver-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x dispatch-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x pass_on-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x port-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x post-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x return-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x shift-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x shunt-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x transfer-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x transport-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x airmail-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x express-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x FedEx-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x forward-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x hand-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x mail-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x pass-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x send-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x ship-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x slip-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x smuggle-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x sneak-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x transmit-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x UPS-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
(s '(all x (all y (all z (z location.n) (all e ((x wire-to.v y z) ** e) (((not (z at-loc.p y)) @ (begin-of.f e)) and ((z at-loc.p y) @ (end-of.f e))))))))
;epilog axioms for class WANT: generated by python on 8/20/2012
(s '(all x (all y (all e ((x covet.v y) ** e) ((x want.v y) ** e)))))
(s '(all x (all y (all e ((x crave.v y) ** e) ((x want.v y) ** e)))))
(s '(all x (all y (all e ((x desire.v y) ** e) ((x want.v y) ** e)))))
(s '(all x (all y (all e ((x fancy.v y) ** e) ((x want.v y) ** e)))))
(s '(all x (all y (all e ((x want.v y) ** e) ((x want.v y) ** e)))))
