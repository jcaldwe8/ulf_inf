(defun ground-literal? (fact)
  "Predicate to test if fact is a ground literal.
   For now, functions are not supported and variables
   are assumed to be any symbol without a 'dot' in the
   name"
  (and (consp fact)
       (or (and (eq (car fact) 'not) 
		(= (length fact) 2)
		(pos-literal? (nth 1 fact)))
	   (pos-literal? fact))))

(defun pos-literal? (lit)
  "Doesn't handle functions yet."
  (and (consp lit)
       (not (eq (car lit) 'not))
       (not (member t (mapcar #'listp lit)))))
(defun predicate-sym? (sym)
  "ASSUMPTION:  
   All predicates are symbols with a dot '.' preceeded 
   and followed by alphabetic characters."
  (and (symbolp sym)
       (= 1 (count-if (lambda (c) (char= c #\.)) 
		      (coerce (string sym) 'sequence)))
       (not (member (position #\. (string sym)) (list 0 (1- (length (string sym))))))))

;; These or similar functions may be needed for proper LF parsing.
(defun function-sym? (sym)
  )
(defun var-sym? (sym)
  "Sloppily recognizes unrestricted TTT variables."
  (and (symbolp sym)
       (char= (char (string sym) 0) #\_)))

(defun ground-term? (sym)
  (and (symbolp sym)
       (not (var-sym? sym))))
(defun valid-rule? (rule)
  (and (consp rule)
       (= (length rule) 3)
       (eq (car rule) '/)))
