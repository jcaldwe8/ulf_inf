Adam Purtee has made the ttt system at /p/nl/tools/ttt/
usable from any location.

[As of Sep 2013] to load the system, use 
  (load "/p/nl/tools/ttt/src/load")
  [last time I tried, I had use (load "/p/nl/tools/ttt/src/load.lisp"),
   -- maybe it was uncompiled... though that shouldn't matter...]

NOTE: To apply ttt to a list structure that may contain symbols
      !, +, ?, *, @, ~, {}, or <>, or ones starting this way [why not
      ^ and / as well??], apply hide-ttt-ops to the list, then do the ttt 
      processing, then apply unhide-ttt-ops to restore the original symbols. 
      The "hiding" is done by wrapping [...] around the "offending" atom.
      (See process-sentence1.lisp, where this is done, e.g., for the atoms 
      obtained by roughly tokenizing the input string, to be able to do 
      ttt-based repairs to the sentence before detokenizing and parsing it. 
      It's again used whenever ttt:apply-rules is applied to a tree.)

From /p/nl/tools/ttt/doc/README:

Both apply-rules and apply-rule have the keyword arguments:

:shallow   - when t, only apply rules to the root of tree-expr (default nil)
             [Nov 4/17: When :shallow is nil, rule application is tried at
             all levels. If we just want one rule application, at whatever
             level the target pattern lies, we can use :shallow nil, and
             :max-n 1]
:max-n     - when supplied, limit the rule application to n iterations.
             E.g, to apply a rule at most once, do
             (apply-rule rule-expr tree-expr :max-n 1)
             or
             (apply-rules (list rule-expr) tree-expr :max-n 1)

:trace     - when t, displays debugging info to stdout
             otherwise, when non-nil write debugging info to a specified file,
             appending to the file if it already exists

             trace format is a tuple of lines per transduction:
              <rule expression>
              <tree before transduction>
              <tree after transduction>
              <blank line>

             apply-rule does not include the rule expression in the trace
             output, since the rule is determined at function call time.

apply-rules additionally supports the keyword argument :rule-order, with values
chosen among:

:slow-forward   - apply each rule until that rule no longer
                  applies, possibly repeating the entire sequence
:earliest-first - always apply the first rule in the list that
                  is applicable, repeat until no rules are applicable
                  the rule list may be processed multiple times
:fast-forward   - apply each rule at most once, in order, repeating
                  the list until convergence

The exported symbols are:
 match-expr,
 apply-rule,
 apply-rules, and
 store-pred.           [Nov 4/17: Example of use, to make ttt "aware" of a pred:
                          (ttt:store-pred 'verbal-pred? #'verbal-pred?)
                       BUT: I thought this was no longer needed. My
                       previous uses of ttt directly includes defined <pred>!
                       and <func>! components in patterns. I couldn't find 
                       any previous uses of store-pred anywhere, and ttt 
                       documentations seems to contain no examples.]

You can use these without being in the TTT package in your repl by prefixing the functions with ttt:.
For example,  (ttt:match-expr '(a (! pattern tree)) '(a tree)).

To define a predicate which is a named TTT pattern, do:
(mk-pred-ttt pred-name patt-expr)
<See pred-defs.lisp for examples>

To define a predicate name the predicate with ending
symbol "?" and define it to accept a single tree
expression as input.
Example:
(defun binary? (tree)
  (if (atom tree)  ;; a leaf is a binary tree
      t
      (and (= (length tree) 2) ;; two children
           (binary? (nth 0 tree))
           (binary? (nth 1 tree)))))
(match-expr 'binary? '(X Y))
 => T
(match-expr 'binary? '(X Y Z))
 => nil
(match-expr '(H binary? K) (H (X (Y Z)) K))
 => T

If you define a predicate outside the TTT package, you must explictly
call ttt:store-pred afterward in order for TTT to be aware of it.


